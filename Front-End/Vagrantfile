# -*- mode: ruby -*-
# vi: set ft=ruby :

# Manque de param√©trage du HOSTNAME et/ou DHCP

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  # config.vm.box = "ubuntu/trusty64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
   config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
     vb.memory = "2048"
   end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL

  config.vm.box = "ubuntu/trusty64"

  # Add IPv4 interface
  config.vm.network "private_network", ip: "192.168.33.10"

  # Use NFS for shared folders for better performance
  config.vm.synced_folder '.', '/vagrant', nfs: true

 # Define the box name
  #config.vm.define "myVM" do |t|
  #end

  # SSH
  #config.ssh.forward_agent = true
  #config.ssh.forward_x11 = true

  # Enable NFS on MAC OS X and Linux
  if RUBY_PLATFORM =~ /darwin/ || RUBY_PLATFORM =~ /linux/
    #config.vm.synced_folder ".", "/vagrant", type: "nfs", nfs_udp: false, mount_options: ['rw', 'vers=3', 'tcp', 'dmode=777', 'fmode=777'] # add 'fsc' in array : the fsc is for cachedfilesd
    
     #use NFS with the following mount options for an acceptable working environment. :mount_options => ['nolock,vers=3,udp,noatime,actimeo=1']
     #without mount options: #starts almost instantly. can take a long time before file changes are reported. livereload needs newline.
        #:mount_options => ['nolock,vers=3,udp,noatime,actimeo=1'] #starts instantly. changes are fast. < 2 secs for sass reload in browser. < 1 secs for js reload in browser.
        #:mount_options => ['nolock,vers=3,udp,noatime,actimeo=0'] #takes > 10 secs to start. after starting sass in browser is < 1.5 secs. js < 1 secs. reloading is unreliable and needs newlines.
        #:mount_options => ['nolock,vers=3,udp,actimeo=1'] #starts instantly. changes are fast. livereload needs newline.
        #:mount_options => ['nolock,vers=3,udp,actimeo=0'] #takes >10 secs to start. after starting tasks are fast. #livereload needs newline.
        #:mount_options => ['nolock,vers=3,udp,noatime'] #starts instantly. sass takes ~10 secs to output something. #livereload needs newline.

    #config.vm.synced_folder "./www", "/vagrant", type: "nfs", mount_options: ['nolock,vers=3,udp,noatime,actimeo=1']
    #sudo apt-get install cachefilesd
    #sudo echo "RUN=yes" > /etc/default/cachefilesd
  end

  # Hack to fix the "stdin: is not a tty" bug
  #config.ssh.shell = "bash -c 'BASH_ENV=/etc/profile exec bash --rcfile ~/.bashrc'"

  config.vm.provider "virtualbox" do |v|
  	
    # VM Name
    v.name = "myVM"
    v.cpus = 2
    
    # Tweak
    v.customize ["modifyvm", :id, "--natdnshostresolver1", "on", "--ioapic", "on"]

    # Allow USB
    v.customize ["modifyvm", :id, "--usb", "on"]      # USB 1.0
    v.customize ["modifyvm", :id, "--usbehci", "on"]  # USB 2.0
    v.customize ["usbfilter", "add", "0", "--target", :id, "--name", "androidSamsung", "--vendorid", "0x04e8"]
  end

  #config.ssh.username = "root"
  #config.ssh.private_key_path = "provision/id_rsa"
  #config.ssh.insert_key

  # Global setup
  config.vm.provision "shell", path: "provision/setup.sh"
  
  # Web App
  config.vm.provision "shell", path: "provision/buildWebApp.sh"

  # Mobile App - Android Dev
  #config.vm.provision "shell", path: "provision/buildMobileApp.sh"

  # SSH Key git
  if File.exists?(File.join(Dir.home, ".ssh", "id_rsa"))
  	config.vm.provision :shell, :inline => "echo -e '#{File.read("#{Dir.home}/.ssh/id_rsa")}' > '/home/vagrant/.ssh/id_rsa'"
  end

  # Git config
  if File.exists?(File.join(Dir.home, ".gitconfig"))
  	config.vm.provision :shell, :inline => "echo -e '#{File.read("#{Dir.home}/.gitconfig")}' > '/home/vagrant/.gitconfig'"
  end

  # Global setup
  config.vm.provision "shell", path: "provision/finish.sh"

  # Reboot
  config.vm.provision :reload

end
